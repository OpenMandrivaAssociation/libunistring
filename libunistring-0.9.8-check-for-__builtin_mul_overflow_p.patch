diff -Naur libunistring-0.9.8/configure.ac libunistring-0.9.8.tpg/configure.ac
--- libunistring-0.9.8/configure.ac	2016-08-06 03:51:24.006383904 +0000
+++ libunistring-0.9.8.tpg/configure.ac	2017-12-11 18:22:32.091098935 +0000
@@ -34,6 +34,17 @@
 AC_PROG_CPP
 AC_PROG_INSTALL
 AC_PROG_MKDIR_P
+AC_CACHE_CHECK([for gcc 7-compatible __builtin_mul_overflow_p],
+  [utils_cv_builtin_mul_overflow_p],
+  [AC_COMPILE_IFELSE(
+    [AC_LANG_PROGRAM(
+      [[]],
+      [[return __builtin_mul_overflow_p(1, 2, 3);]])],
+    [utils_cv_builtin_mul_overflow_p=yes],
+    [utils_cv_builtin_mul_overflow_p=no])])
+if test $utils_cv_builtin_mul_overflow_p = yes; then
+  AC_DEFINE([HAVE_BUILTIN_MUL_OVERFLOW_P], [1], [Define if your compiler supports __builtin_mul_overflow_p])
+fi
 
 dnl Check for host type.
 
diff -Naur libunistring-0.9.8/lib/xalloc-oversized.h libunistring-0.9.8.tpg/lib/xalloc-oversized.h
--- libunistring-0.9.8/lib/xalloc-oversized.h	2017-11-30 08:36:38.006383904 +0000
+++ libunistring-0.9.8.tpg/lib/xalloc-oversized.h	2017-12-11 18:25:06.326104813 +0000
@@ -50,7 +50,7 @@
    positive and N must be nonnegative.  This is a macro, not a
    function, so that it works correctly even when SIZE_MAX < N.  */
 
-#if 7 <= __GNUC__
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
diff -Naur libunistring-0.9.8/tests/intprops.h libunistring-0.9.8.tpg/tests/intprops.h
--- libunistring-0.9.8/tests/intprops.h	2017-11-30 08:36:38.006383904 +0000
+++ libunistring-0.9.8.tpg/tests/intprops.h	2017-12-11 18:24:19.083103013 +0000
@@ -225,14 +225,11 @@
 # define _GL_HAS_BUILTIN_OVERFLOW 0
 #endif
 
-/* True if __builtin_add_overflow_p (A, B, C) works.  */
-#define _GL_HAS_BUILTIN_OVERFLOW_P (7 <= __GNUC__)
-
 /* The _GL*_OVERFLOW macros have the same restrictions as the
    *_RANGE_OVERFLOW macros, except that they do not assume that operands
    (e.g., A and B) have the same type as MIN and MAX.  Instead, they assume
    that the result (e.g., A + B) has that type.  */
-#if _GL_HAS_BUILTIN_OVERFLOW_P
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define _GL_ADD_OVERFLOW(a, b, min, max)                               \
    __builtin_add_overflow_p (a, b, (__typeof__ ((a) + (b))) 0)
 # define _GL_SUBTRACT_OVERFLOW(a, b, min, max)                          \
